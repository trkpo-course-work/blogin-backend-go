// Code generated by MockGen. DO NOT EDIT.
// Source: internal/email/email.go

// Package mock_email is a generated GoMock package.
package mock_email

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailSender is a mock of MailSender interface.
type MockMailSender struct {
	ctrl     *gomock.Controller
	recorder *MockMailSenderMockRecorder
}

// MockMailSenderMockRecorder is the mock recorder for MockMailSender.
type MockMailSenderMockRecorder struct {
	mock *MockMailSender
}

// NewMockMailSender creates a new mock instance.
func NewMockMailSender(ctrl *gomock.Controller) *MockMailSender {
	mock := &MockMailSender{ctrl: ctrl}
	mock.recorder = &MockMailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailSender) EXPECT() *MockMailSenderMockRecorder {
	return m.recorder
}

// SendConfirmationCode mocks base method.
func (m *MockMailSender) SendConfirmationCode(to, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfirmationCode", to, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfirmationCode indicates an expected call of SendConfirmationCode.
func (mr *MockMailSenderMockRecorder) SendConfirmationCode(to, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmationCode", reflect.TypeOf((*MockMailSender)(nil).SendConfirmationCode), to, code)
}

// SendResetCode mocks base method.
func (m *MockMailSender) SendResetCode(to, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetCode", to, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetCode indicates an expected call of SendResetCode.
func (mr *MockMailSenderMockRecorder) SendResetCode(to, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetCode", reflect.TypeOf((*MockMailSender)(nil).SendResetCode), to, code)
}
